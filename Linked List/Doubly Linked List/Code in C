
#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    int *next;
    int *prev;
};
struct node *head = NULL;
void deleteBegin(){
    struct node *temp;
    if(head==NULL){
        printf("\n No Elements in Linked List");
        return;
    }
    temp = head;
    head = temp->next;
    head->prev = NULL;
    free(temp);
    printf("\n Deleted Successfully");
    
}
void deletePosition(){
    int position;
    printf("\n Enter the position");
    scanf("%d",&position);
    struct node *current,*temp,*ptr,*ptr1;
    temp=head;
    for(int i=0;i<position-1;i++){
        if( temp == NULL || temp->next == NULL ){
            printf("\n Less Elements, Cant Delete!");
            return;
        }
        temp=temp->next;
    }
    ptr= temp->next;
    temp->next = ptr->next;
    ptr1= ptr->next;
    ptr->prev = temp;
    free(ptr);
    printf("\n Deleted Successfully");
}
void deleteEnd(){
    struct node *current,*temp,*ptr,*p;
    current = (struct node*)malloc(sizeof(struct node));
    if(head == NULL){
        printf("\n No Elements,cant delete");
    }
    else{
        temp = head;
        while(temp->next!=NULL){
            p=temp;
            temp=temp->next;
        }
        
        ptr= p->next;
        p->next = NULL;
        free(ptr);
        printf("\n Deleted Successfully");

    }
}
void insertBegin(){
    int data;
    printf("\n Enter the data to insert: ");
    scanf("%d",&data);
    struct node *current,*temp;
    current = (struct node*)malloc(sizeof(struct node));
    if(head == NULL){
        current->data = data;
        current->next = NULL;
        current->prev =NULL;
        head = current;
        printf("\n Inserted Successfully");
    }
    else{
        current->prev = NULL;
        current->data = data;
        current->next = head;
        temp=head;
        temp->prev = current;
        head = current;
        printf("\n Inserted Successfully");

    }
    
}
void insertEnd(){
    int data;
    printf("\n Enter the data to insert: ");
    scanf("%d",&data);
    struct node *current,*temp,*ptr;
    current = (struct node*)malloc(sizeof(struct node));
    if(head == NULL){
        current->data = data;
        current->next = NULL;
        current->prev =NULL;
        head = current;
        printf("\n Inserted Successfully");
    }
    else{
        temp = head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        current->prev=temp;
        current->data = data;
        current->next = NULL;
        temp->next = current;
        printf("\n Inserted Successfully");

    }
    
}
void insertPosition(){
    int data,position;
    printf("\n Enter the data to insert: ");
    scanf("%d",&data);
    printf("\n Enter the position: ");
    scanf("%d",&position);
    struct node *current,*temp,*ptr;
    current = (struct node*)malloc(sizeof(struct node));
    
    temp=head;
    for(int i=0;i<position-1;i++){
        if( temp == NULL || temp->next == NULL ){
            printf("\n Less Elements, Cant Insert!");
            return;
        }
        temp=temp->next;
    }
    ptr = temp->next;
    current->prev = temp;
    current->data = data;
    current->next = ptr;
    if(ptr!=NULL){
        ptr->prev = current;
    }
    temp->next= current;
    printf("\n Inserted Successfully");


    
}
void reverse(){
    int *ptr,*after;
    struct node *temp;
    temp=head;
    while(temp!=NULL){
        after=temp;
        ptr= temp->next;
        temp->next = temp->prev;
        temp->prev = ptr;
        temp=ptr;
    }
    head=after;
    printf("\n Reversed Successfully");
}
void display(){
    struct node *temp;
    temp = (struct node*)malloc(sizeof(struct node));

    if(head == NULL){
        printf("\n Empty Linked List");
    }
    else{
        temp=head;
        printf("\n");
        while(temp!=NULL){
            printf("%d -> ",temp->data);
            temp= temp->next;
        }
    }
}
int main()
{
    int option;
    printf("\n DOUBLY LINKED LIST");
    while(1){
        printf("\n 1. Insert at Begining \n 2. Insert at specified position \n 3. Insert at end \n 4. Delete at Begining \n 5. Delete at specified position \n 6. Delete at end \n 7. Reverse \n 8. Display \n 9. Exit \n" );
        printf("Choose an option...\n");
        scanf("%d",&option);
        switch(option){
            case 1: 
                insertBegin();
                break;
            case 2:
                insertPosition();
                break;
            case 3:
                insertEnd();
                break;
            case 4:
                deleteBegin();
                break;
            case 5:
                deletePosition();
                break;
            case 6:
                deleteEnd();
                break;
            case 7:
                reverse();
                break;
            case 8:
                display();
                break;
            case 9:
                return 0;
        }
    }
    
    

    return 0;
}
